from tkinter import *
from random import randint
import pygame

# Initialiser Pygame pour les sons
pygame.init()
eat_sound = pygame.mixer.Sound('correct.mp3')  

# Créer une fenêtre grâce à la fonction Tk()
fenetre = Tk()
fenetre.title('Drake The Snake')

# Récupérer les dimensions de l'écran
hauteur = fenetre.winfo_screenheight()
largeur = fenetre.winfo_screenwidth()

# Convertir les données de la hauteur (H) et de la largeur (L) en int, puis en string, et modifie les dimensions voulues
H = str(int(hauteur / 1.1))
L = str(int(largeur / 2))
fenetre.geometry(L + "x" + H + "+0+0")

# Définir les dimensions du plateau de jeu
LargeurPlateau = largeur / 2
HauteurPlateau = hauteur / 1.2

# Créer un Canvas pour le plateau de jeu
Plateau = Canvas(fenetre, width=LargeurPlateau, height=HauteurPlateau, bg="green")
Plateau.pack(side="bottom")

# Créer un Canvas pour le score
Barre = Text(fenetre, width=int(largeur / 2), height=int(HauteurPlateau / 10), bg="light blue", font=("Helvetica", 16, "bold"))
Barre.pack(side="top")
Barre.tag_configure("center", justify='center')
Barre.insert("1.0", "score: 0\n", "center")

# Définir le nombre de cases du plateau
NombreDeCases = 75
LargeurCase = (LargeurPlateau / NombreDeCases)
HauteurCase = (HauteurPlateau / NombreDeCases)

def remplir_case(x, y):
    OrigineCaseX1 = x * LargeurCase
    OrigineCaseY1 = y * HauteurCase
    OrigineCaseX2 = OrigineCaseX1 + LargeurCase
    OrigineCaseY2 = OrigineCaseY1 + HauteurCase
    Plateau.create_rectangle(OrigineCaseX1, OrigineCaseY1, OrigineCaseX2, OrigineCaseY2, fill="black")

def case_aleatoire():
    AleatoireX = randint(0, NombreDeCases - 1)
    AleatoireY = randint(0, NombreDeCases - 1)
    return (AleatoireX, AleatoireY)

def dessine_serpent(snake):
    for case in snake:
        x, y = case
        remplir_case(x, y)

def etre_dans_snake(case):
    return 1 if case in SNAKE else 0

def fruit_aleatoire():
    FruitAleatoire = case_aleatoire()
    while etre_dans_snake(FruitAleatoire):
        FruitAleatoire = case_aleatoire()
    return FruitAleatoire

def dessine_fruit():
    global FRUIT
    x, y = FRUIT
    OrigineCaseX1 = x * LargeurCase
    OrigineCaseY1 = y * HauteurCase
    OrigineCaseX2 = OrigineCaseX1 + LargeurCase
    OrigineCaseY2 = OrigineCaseY1 + HauteurCase
    Plateau.create_oval(OrigineCaseX1, OrigineCaseY1, OrigineCaseX2, OrigineCaseY2, fill="red")

def left_key(event):
    global MOUVEMENT
    if MOUVEMENT != (1, 0):  # Empêcher de revenir en arrière
        MOUVEMENT = (-1, 0)

def right_key(event):
    global MOUVEMENT
    if MOUVEMENT != (-1, 0):  # Empêcher de revenir en arrière
        MOUVEMENT = (1, 0)

def up_key(event):
    global MOUVEMENT
    if MOUVEMENT != (0, 1):  # Empêcher de revenir en arrière
        MOUVEMENT = (0, -1)

def down_key(event):
    global MOUVEMENT
    if MOUVEMENT != (0, -1):  # Empêcher de revenir en arrière
        MOUVEMENT = (0, 1)

fenetre.bind("<Left>", left_key)
fenetre.bind("<Right>", right_key)
fenetre.bind("<Up>", up_key)
fenetre.bind("<Down>", down_key)

def serpent_mort(NouvelleTete):

    global PERDU

    NouvelleTeteX, NouvelleTeteY = NouvelleTete

    # si le serpent se mange lui-même (sauf au démarrage, c'est-à-dire: sauf quand MOUVEMENT vaut (0, 0))
    # OU si on sort du canvas
    if (etre_dans_snake(NouvelleTete) and MOUVEMENT != (0, 0)) or NouvelleTeteX < 0 or NouvelleTeteY < 0 or NouvelleTeteX >= NombreDeCases or NouvelleTeteY >= NombreDeCases:
        # alors, on a perdu
        PERDU = 1

def mise_a_jour_score():
    global SCORE
    SCORE += 1
    Barre.delete("1.0", "end")
    Barre.insert("1.0", "score: " + str(SCORE) + "\n", "center")

def mise_a_jour_snake():
    global SNAKE, FRUIT
    (AncienneTeteX, AncienneTeteY) = SNAKE[0]
    MouvementX, MouvementY = MOUVEMENT
    NouvelleTete = (AncienneTeteX + MouvementX, AncienneTeteY + MouvementY)
    serpent_mort(NouvelleTete)
    SNAKE.insert(0, NouvelleTete)
    if NouvelleTete == FRUIT:
        eat_sound.play()  # Jouer le son quand le serpent mange un fruit
        FRUIT = fruit_aleatoire()
        mise_a_jour_score()
    else:
        SNAKE.pop()

def reinitialiser_jeu():
    global SNAKE, FRUIT, MOUVEMENT, SCORE, PERDU
    SNAKE = [case_aleatoire()]
    FRUIT = fruit_aleatoire()
    MOUVEMENT = (0, 0)
    SCORE = 0
    PERDU = 0

def afficher_fenetre_perdu():
    fenetre_perdu = Toplevel(fenetre)
    fenetre_perdu.title("Partie Perdue")
    fenetre_perdu.geometry("300x200")

    Label(fenetre_perdu, text=f"Score: {SCORE}", font=("Helvetica", 16, "bold")).pack(pady=10)
    Button(fenetre_perdu, text="Rejouer", command=lambda: [fenetre_perdu.destroy(), reinitialiser_jeu()]).pack(pady=10)
    Button(fenetre_perdu, text="Retour au menu principal").pack(pady=10)

def tache():
    fenetre.update()
    fenetre.update_idletasks()
    mise_a_jour_snake()
    Plateau.delete("all")
    dessine_fruit()
    dessine_serpent(SNAKE)
    if PERDU:
        afficher_fenetre_perdu()
        reinitialiser_jeu()
        fenetre.after(70, tache)
    else:
        fenetre.after(70, tache)

SNAKE = [case_aleatoire()]
FRUIT = fruit_aleatoire()
MOUVEMENT = (0, 0)
SCORE = 0
PERDU = 0

fenetre.after(0, tache())
fenetre.mainloop()

# Fermer Pygame quand le programme est terminé
pygame.quit()
